/**
 * Problem: Search in a Sorted Array
 *
 * Task:
 * - Find the index of a target value in a sorted array using binary search.
 *
 * Approach:
 * 1. Use **binary search** to locate the target value.
 * 2. Maintain two pointers, `l` (left) and `r` (right), to define the search range.
 * 3. Compute the middle index `mid`:
 *    - If `nums[mid]` equals the target, return `mid`.
 *    - If `nums[mid]` is greater than the target, search the left side (`r = mid - 1`).
 *    - Otherwise, search the right side (`l = mid + 1`).
 * 4. If the target is not found, return `-1`.
 *
 * Complexity:
 * - **Time**: O(log N), as the array is halved at each step.
 * - **Space**: O(1), as no extra space is used.
 */

class Solution {
public:
    int firstBadVersion(int n) {
      long long l=1;  long long r=n;  long long  ans=-1;
        while(l<=r){
           long long mid=(l+r)/2;
            if(isBadVersion(mid)==true){  
                ans=mid;
                r=mid-1;   // get the first true 
            }
            else l=mid+1;
        }
        return ans; 
    }
};
