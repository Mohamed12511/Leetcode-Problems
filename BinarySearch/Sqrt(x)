 // Problem: Find the square root of a number `x` without using built-in functions.
    // Approach:
    //          - Use binary search to efficiently find the integer square root of `x`.
    //          - The square root of `x` is the largest integer `y` such that `y*y <= x`.
    //          - If `x` is a perfect square, return its square root.
    //          - If `x` is not a perfect square, return the largest integer whose square is less than or equal to `x`.

    // Time Complexity: O(log x), where x is the input number.
    //                  Binary search narrows the range by half in each iteration, leading to a logarithmic time complexity.
    // Space Complexity: O(1), as we use only a constant amount of extra space for variables.
class Solution {
public:
    int mySqrt(int x) {
       if(x==0)return 0;
       if(x==1)return 1;
        long long l=1;long long r=x/2;long long ans=0;
        while(l<=r){
            long long mid=(l+r)/2;
            if(mid*mid==x)return mid;
            else if(mid*mid<x){
          ans=mid;
          l=mid+1;
            }
            else r=mid-1;
        }
        return ans;
    }
};
