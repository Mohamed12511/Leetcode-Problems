 // Problem: Find the maximum count of either positive or negative numbers in a sorted array.
    // Approach:
    //          - Use binary search to find the first positive number and count the positives.
    //          - Use binary search to find the first non-negative number and count the negatives.
    //          - Return the maximum count of either positive or negative numbers.

    // Time Complexity: O(log n), where n is the number of elements in the array.
    //                  Two binary searches are performed, each taking O(log n).
    // Space Complexity: O(1), as we only use a constant amount of extra space.

class Solution {
public:
    int maximumCount(vector<int>& nums) {
        int l = 0, r = nums.size() - 1;
        int pos = 0, neg = 0;

       while(l<=r){
        int mid=(l+r)/2;
        if(nums[mid]>0){
            pos=nums.size()-mid;
            r=mid-1;
        }
        else l=mid+1;
       }
      l=0;r=nums.size()-1;
      while(l<=r){
        int mid=(l+r)/2;
        if(nums[mid]<0){
            neg=mid+1;
            l=mid+1;
        }
        else r=mid-1;
      }

      return max(pos,neg);
    }
};
