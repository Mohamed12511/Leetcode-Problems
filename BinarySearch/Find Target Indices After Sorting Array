 // Problem: Find all indices of the target element in a sorted array `nums` after sorting it.
    // Approach:
    //          - First, sort the array to ensure all occurrences of the target are next to each other.
    //          - Use binary search to find the first occurrence of the target.
    //          - Once the first occurrence is found, add all subsequent indices where the target appears.

    // Time Complexity: O(n log n), where n is the size of the array. The sorting operation takes O(n log n) time.
    //                  After sorting, the binary search takes O(log n) time to find the first occurrence of the target.
    // Space Complexity: O(n), due to the space used by the result vector to store the indices.
class Solution {
public:
    vector<int> targetIndices(vector<int>& nums, int target) {
        sort(nums.begin(),nums.end());
        vector<int>res;
        int l=0;   int r=nums.size()-1;  int ans=-1;
        while(l<=r){
            int mid=(l+r)/2;
            if(nums[mid]==target){
            ans =mid;
               r=mid-1;
            }
            else if(nums[mid]<target){
                l=mid+1;
            }
            else r=mid-1;
        }
        if(ans==-1)return res;
        for(int i=ans;i<nums.size()&&nums[i]==target;i++){
            res.push_back(i);
        }
        return res;
    }
};
