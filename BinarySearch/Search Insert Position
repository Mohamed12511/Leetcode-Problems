* Problem: Given a sorted array `nums` and a target value `target`, 
 * find the index of the target in the array. If the target is not found, 
 * return the index where it would be if it were inserted in order.
 * 
 * Approach:
 *      - Use binary search to efficiently find the target or the correct insertion position.
 *      - The binary search approach allows us to perform the search in O(log n) time, 
 *        as opposed to a linear scan.
 *      
 * Time Complexity: O(log n), where n is the number of elements in the `nums` array.
 *                  The time complexity is logarithmic because we are using binary search.
 * Space Complexity: O(1), since no extra space is used apart from a few variables.
 */
class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        int l=0;int r=nums.size()-1;int ans=-1;
        while(l<=r){
            int mid=(l+r)/2;
            if(nums[mid]<=target){
                ans=mid;
                l=mid+1;
            }
            else {
                r=mid-1;
            }
        }
        if(ans==-1)return 0;
        else if(nums[ans]==target)return ans;
        else return ans+1;
      
    }
};
