 // Problem: Find the first common element in two sorted arrays.
    // Approach:
    //          - Use binary search to find the common element from the second array for each element in the first array.
    //          - The arrays are sorted, so binary search can efficiently check if an element from the first array exists in the second array.
    //          - Return the first common element if found, otherwise return -1.

    // Time Complexity: O(m * log n), where m is the number of elements in nums1 and n is the number of elements in nums2.
    //                  For each element in nums1, a binary search is performed on nums2, resulting in O(log n) time for each search.
    // Space Complexity: O(1), as we are using a constant amount of extra space for variables.
class Solution {
public:
    int getCommon(vector<int>& nums1, vector<int>& nums2) {
        int flag=0;
        for(int i=0;i<nums1.size();i++){
            int x=nums1[i];
            int l=0;int r=nums2.size()-1;
            while(l<=r){
                int mid=(l+r)/2;
                if(nums2[mid]==x){
                  return x;
                }
                else if(nums2[mid]<x){
                    l=mid+1;
                }
                else r=mid-1;
            }
            
        }
        return -1;
    }
};
