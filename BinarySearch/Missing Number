// Problem: Given an array of integers `nums` containing n distinct numbers taken from 0 to n, 
// find the one number that is missing from the array.
//
// Approach:
//          - The sum of the numbers from 0 to n can be calculated using the formula: n * (n + 1) / 2.
//          - The sum of the numbers in the given array is calculated.
//          - The missing number is simply the difference between the expected sum and the actual sum of the array.
//
// Time Complexity: O(n), where n is the size of the array. We iterate through the array once to calculate the actual sum.
// Space Complexity: O(1), as we use a constant amount of extra space.

class Solution {
public:
    int missingNumber(vector<int>& nums) {
         int n=nums.size();
         int expected_sum=n*(n+1)/2; // math 
         int actual_sum=0; // nums in array
      
         for(int num:nums){
            actual_sum+=num;
         }
         return expected_sum-actual_sum; 
    }
};
