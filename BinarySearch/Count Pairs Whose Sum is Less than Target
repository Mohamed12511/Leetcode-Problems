/**
 * Problem: Count Pairs with Sum Greater than or Equal to Target
 *
 * Task:
 * - Given an array of integers and a target value, count the number of pairs in the array whose sum is greater than or equal to the target.
 *
 * Approach:
 * 1. **Sort** the array in ascending order to facilitate efficient pair counting.
 * 2. Use a **binary search** for each element (`nums[i]`) to find the smallest element (`nums[l]`) such that `nums[i] + nums[l] >= target`.
 *    - If the sum of the current element and the chosen `nums[l]` is greater than or equal to the target, count the pair and move the pointer.
 * 3. **Efficient Counting**: For each `i`, the valid pairs can be found from index `i+1` to `r-1`, where `r` is determined via binary search.
 *
 * Time Complexity:
 * - **O(N log N)**, where N is the length of the array. Sorting the array takes O(N log N), and binary search within the loop adds an additional O(log N).
 *
 * Space Complexity:
 * - **O(1)**, apart from the input array.
 */
#include <vector>
#include <algorithm>
using namespace std;

class Solution {
public:
    int countPairs(vector<int>& nums, int target) {
      
        sort(nums.begin(),nums.end());
        int count=0;

        for(int i=0;i<nums.size();i++){
            int l=i+1;  int r=nums.size();
            while(l<r){
                int mid=(l+r)/2;
                if(nums[mid]+nums[i]>=target) r=mid;
                else l=mid+1;
            }
        count+=(l-i-1);
        }
        return count;
    }
};
